package Pr2;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.Executors;

public class Server {
    public static void main(String[] args) throws Exception {
        try (var listener = new ServerSocket(8888)) {
            System.out.println("Запуск сервера...");

            var pool = Executors.newFixedThreadPool(20);
            while (true) {
                pool.execute(new Capitalizer(listener.accept()));
            }
        }
    }

    private static class Capitalizer implements Runnable {
        private final Socket socket;
        private final Scanner in;
        private final PrintWriter out;

        Capitalizer(Socket socket) throws IOException {
            this.socket = socket;
            this.in = new Scanner(socket.getInputStream());
            this.out = new PrintWriter(socket.getOutputStream(), true);
        }

        @Override
        public void run() {
            System.out.println("Соединение установлено с: " + socket);

            try {
                while (true) {
                    int numberTask = this.in.nextInt();

                    switch (numberTask) {
                        case 3: {
                            task3();
                            break;
                        }

                        case 26: {
                            task26();
                            break;
                        }

                        case 29: {
                            task29();
                            break;
                        }
                        case 2: {
                            task2();
                            break;
                        }
                        case 5: {
                            task5();
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("Завершение работы:" + socket);
                e.printStackTrace();
            }
        }

        private int getInt() {
            return Integer.parseInt(this.in.next());
        }

        public double task3() {
            int S = getInt();
            int T = getInt();
            return ((2 * T - (-2 * S) - Math.sin(1.17)) / (5 + 1.17) + (2.2 * 2 - T - Math.sin(S - T)) / (5 + S - T));
        }

        public void task26() {
            ArrayList<Integer> arr1 = new ArrayList<Integer>();

            int size = 0;

            size = Integer.parseInt(this.in.next());

            for (int i = 0; i < size; i++) {
                arr1.add(getInt());
                System.out.println(arr1.get(i));
            }

            int N = 0;

            N = Integer.parseInt(this.in.next());

            try {
                out.println(Tasks.task26(arr1, N));
            } catch (Error e) {
                System.out.println("Error");
                out.println(e.getMessage());
            }
        }

        public void task29() {
            double weight = 0;

            weight = Double.parseDouble(this.in.next());

            try {
                out.println(Tasks.task29(weight));
            } catch (Error e) {
                System.out.println("Error");
                out.println(e.getMessage());
            }
        }

        public void task2() {
            ///////////////////////////////////////////////////////////////////////////
            ArrayList<Integer> arr21 = new ArrayList<Integer>();

            int size21 = 0;
            size21 = Integer.parseInt(this.in.next());

            for (int i = 0; i < size21; i++) {
                arr21.add(getInt());
            }
            ///////////////////////////////////////////////////////////////////////////
            ArrayList<Integer> arr22 = new ArrayList<Integer>();

            int size22 = 0;

            size22 = Integer.parseInt(this.in.next());

            for (int i = 0; i < size22; i++) {
                arr22.add(getInt());
            }
            ///////////////////////////////////////////////////////////////////////////
            ArrayList<Integer> arr23 = new ArrayList<Integer>();

            int size23 = 0;

            size23 = Integer.parseInt(this.in.next());

            for (int i = 0; i < size23; i++) {
                arr23.add(getInt());
            }

            try {
                out.println(Tasks.task2(arr21, arr22, arr23));
            } catch (Error e) {
                System.out.println("Error");
                out.println(e.getMessage());
            }
        }

        public void task5() {
            double S, T = 0;

            S = Double.parseDouble(this.in.next());
            T = Double.parseDouble(this.in.next());

            try {
                out.println(Tasks.task5(S, T));
            } catch (Error e) {
                System.out.println("Error");
                out.println(e.getMessage());
            }
        }

        public int sum(int[] arr, int sum) {

            for (int i = 0; i < arr.length; i++) {
                sum += arr[i];
            }
            return sum;
        }

        public double formulaForFifth(double A, double B) {
            return ((2 * A + B * B) / (A * B * 2 + B * 5));
        }

        // public void arrSetter(int[] myArray) {
        // System.out.println("Введите размер массива: ");
        // int size = in.nextInt();
        // myArray = new int[size];
        // for (int i = 0; i < myArray.length; i++) {
        // System.out.println("Введите" + (i+1) + " элемент массива: ");
        // myArray[i] = in.nextInt();
        // }
        // }
    }
}
